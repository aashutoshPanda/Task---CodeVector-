{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","components/Card/cardsUI.js","App.js","registerServiceWorker.js","index.js"],"names":["drawerToggleButton","props","react_default","a","createElement","className","onClick","click","toolbar","SideDrawer_DrawerToggleButton","drawerClickHandler","href","type","placeholder","sideDrawer","drawerClasses","show","backdrop","Card","src","img_url","alt","title","para","App","state","sideDrawerOpen","drawerToggleClickHandler","_this","setState","prevState","backdropClickHandler","this","Backdrop_Backdrop","style","height","Toolbar_Toolbar","SideDrawer_SideDrawer","marginTop","cardsUI","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6dde0dbc.chunk.js","sourcesContent":["import React from 'react';\n\nimport './DrawerToggleButton.css';\n\nconst drawerToggleButton = props => (\n    <button className=\"toggle-button\" onClick={props.click}>\n        <div className=\"toggle-button__line\" />\n        <div className=\"toggle-button__line\" />\n        <div className=\"toggle-button__line\" />\n    </button>\n);\n\nexport default drawerToggleButton;","import React from 'react';\n\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\nimport './Toolbar.css';\n\nconst toolbar = props => (\n  <header className=\"toolbar\">\n    <nav className=\"toolbar__navigation\">\n        <div className=\"toolbar__toggle-button\">\n            <DrawerToggleButton click={props.drawerClickHandler} />\n        </div>\n        <div className=\"toolbar__logo\"><a href=\"/\">vPLAY</a></div>\n        <input type=\"text\" className=\"search-input\" placeholder=\"Search Now !\"/>\n        <div className=\"spacer\" />\n        <div className=\"toolbar_navigation-items\">\n            <ul>\n                <li><a href=\"/\">Networks</a></li>\n                <li><a href=\"/\">Countries</a></li>\n            </ul>\n        </div>\n    </nav>\n  </header>\n);\n\nexport default toolbar;\n","import React from 'react';\n\nimport './SideDrawer.css';\n\nconst sideDrawer = props => {\n  let drawerClasses = 'side-drawer';\n  if (props.show) {\n    drawerClasses = 'side-drawer open';\n  }\n  return (\n    <nav className={drawerClasses}>\n      <ul>\n        <li>\n          <a href=\"/\">Products</a>\n        </li>\n        <li>\n          <a href=\"/\">Users</a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default sideDrawer;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = props => (\n    <div className=\"backdrop\" onClick={props.click} />\n);\n\nexport default backdrop;","import React from 'react';\r\nimport './card-style.css';\r\n\r\n\r\nconst Card = props =>{\r\n\treturn(\r\n\t\t<div className=\"card text-center shadow\">\r\n\t\t\t<div className=\"overflow\">\r\n\t\t\t\t\r\n\t\t\t\t\t\t<img  src={props.img_url} alt=\"Image-1\" className='card-img-top' />\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"card-body text-dark\">\r\n\t\t\t\t<h4  className=\"card-title\"> {props.title}\t</h4>\r\n\t\t\t\t<p  className=\"card-text text-secondary\"> {props.para}\t</p>\r\n\t\t\t\t<a  href=\"#\" className=\"btn btn-success\">\tWatch!\t</a>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react';\n\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/Backdrop';\nimport Card from './components/Card/cardsUI';\n\n\nconst img_url_demo = \"https:\\/\\/static.episodate.com\\/images\\/tv-show\\/thumbnail\\/23455.jpg\";\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false});\n  };\n\n  render() {\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />\n    }\n    return (\n      <div style={{height: '100%'}}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer show={this.state.sideDrawerOpen} />\n        {backdrop}\n        <main style={{marginTop: '64px'}}>\n          <Card title=\"GOT\" img_url={img_url_demo} para=\"lorem ipsum\" />\n        </main>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\nif (module.hot) {\n  module.hot.accept();\n}"],"sourceRoot":""}